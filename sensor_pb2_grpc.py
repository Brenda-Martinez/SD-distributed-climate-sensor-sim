# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import sensor_pb2 as sensor__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in sensor_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SensorServiceStub(object):
    """--- Definição do Serviço SensorService ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServerPublicKey = channel.unary_unary(
                '/SensorService/GetServerPublicKey',
                request_serializer=sensor__pb2.Empty.SerializeToString,
                response_deserializer=sensor__pb2.PublicKeyResponse.FromString,
                _registered_method=True)
        self.EstablishSession = channel.unary_unary(
                '/SensorService/EstablishSession',
                request_serializer=sensor__pb2.EncryptedSessionKeyRequest.SerializeToString,
                response_deserializer=sensor__pb2.SessionResponse.FromString,
                _registered_method=True)
        self.GetData = channel.unary_unary(
                '/SensorService/GetData',
                request_serializer=sensor__pb2.SensorRequest.SerializeToString,
                response_deserializer=sensor__pb2.SensorData.FromString,
                _registered_method=True)
        self.ProcessMarker = channel.unary_unary(
                '/SensorService/ProcessMarker',
                request_serializer=sensor__pb2.SnapshotMarker.SerializeToString,
                response_deserializer=sensor__pb2.SnapshotMarker.FromString,
                _registered_method=True)
        self.ProcessBullyMessage = channel.unary_unary(
                '/SensorService/ProcessBullyMessage',
                request_serializer=sensor__pb2.BullyMessage.SerializeToString,
                response_deserializer=sensor__pb2.BullyMessage.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/SensorService/Ping',
                request_serializer=sensor__pb2.PingRequest.SerializeToString,
                response_deserializer=sensor__pb2.PingResponse.FromString,
                _registered_method=True)
        self.ReplicateData = channel.unary_unary(
                '/SensorService/ReplicateData',
                request_serializer=sensor__pb2.SensorData.SerializeToString,
                response_deserializer=sensor__pb2.ReplicationAck.FromString,
                _registered_method=True)
        self.RequestLock = channel.unary_unary(
                '/SensorService/RequestLock',
                request_serializer=sensor__pb2.LockRequest.SerializeToString,
                response_deserializer=sensor__pb2.LockResponse.FromString,
                _registered_method=True)
        self.ReleaseLock = channel.unary_unary(
                '/SensorService/ReleaseLock',
                request_serializer=sensor__pb2.LockRequest.SerializeToString,
                response_deserializer=sensor__pb2.LockResponse.FromString,
                _registered_method=True)


class SensorServiceServicer(object):
    """--- Definição do Serviço SensorService ---
    """

    def GetServerPublicKey(self, request, context):
        """Autenticação / Estabelecimento de Sessão
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EstablishSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetData(self, request, context):
        """Leitura de dados (agora requer token e retorna dados criptografados)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessMarker(self, request, context):
        """--- RPCs que permanecem INSEGUROS neste exemplo ---
        Para adicionar segurança, precisariam validar session_token e/ou criptografar payloads
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessBullyMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestLock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseLock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServerPublicKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerPublicKey,
                    request_deserializer=sensor__pb2.Empty.FromString,
                    response_serializer=sensor__pb2.PublicKeyResponse.SerializeToString,
            ),
            'EstablishSession': grpc.unary_unary_rpc_method_handler(
                    servicer.EstablishSession,
                    request_deserializer=sensor__pb2.EncryptedSessionKeyRequest.FromString,
                    response_serializer=sensor__pb2.SessionResponse.SerializeToString,
            ),
            'GetData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetData,
                    request_deserializer=sensor__pb2.SensorRequest.FromString,
                    response_serializer=sensor__pb2.SensorData.SerializeToString,
            ),
            'ProcessMarker': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessMarker,
                    request_deserializer=sensor__pb2.SnapshotMarker.FromString,
                    response_serializer=sensor__pb2.SnapshotMarker.SerializeToString,
            ),
            'ProcessBullyMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessBullyMessage,
                    request_deserializer=sensor__pb2.BullyMessage.FromString,
                    response_serializer=sensor__pb2.BullyMessage.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=sensor__pb2.PingRequest.FromString,
                    response_serializer=sensor__pb2.PingResponse.SerializeToString,
            ),
            'ReplicateData': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateData,
                    request_deserializer=sensor__pb2.SensorData.FromString,
                    response_serializer=sensor__pb2.ReplicationAck.SerializeToString,
            ),
            'RequestLock': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestLock,
                    request_deserializer=sensor__pb2.LockRequest.FromString,
                    response_serializer=sensor__pb2.LockResponse.SerializeToString,
            ),
            'ReleaseLock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseLock,
                    request_deserializer=sensor__pb2.LockRequest.FromString,
                    response_serializer=sensor__pb2.LockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SensorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('SensorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SensorService(object):
    """--- Definição do Serviço SensorService ---
    """

    @staticmethod
    def GetServerPublicKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SensorService/GetServerPublicKey',
            sensor__pb2.Empty.SerializeToString,
            sensor__pb2.PublicKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EstablishSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SensorService/EstablishSession',
            sensor__pb2.EncryptedSessionKeyRequest.SerializeToString,
            sensor__pb2.SessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SensorService/GetData',
            sensor__pb2.SensorRequest.SerializeToString,
            sensor__pb2.SensorData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessMarker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SensorService/ProcessMarker',
            sensor__pb2.SnapshotMarker.SerializeToString,
            sensor__pb2.SnapshotMarker.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessBullyMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SensorService/ProcessBullyMessage',
            sensor__pb2.BullyMessage.SerializeToString,
            sensor__pb2.BullyMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SensorService/Ping',
            sensor__pb2.PingRequest.SerializeToString,
            sensor__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SensorService/ReplicateData',
            sensor__pb2.SensorData.SerializeToString,
            sensor__pb2.ReplicationAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SensorService/RequestLock',
            sensor__pb2.LockRequest.SerializeToString,
            sensor__pb2.LockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReleaseLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SensorService/ReleaseLock',
            sensor__pb2.LockRequest.SerializeToString,
            sensor__pb2.LockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
